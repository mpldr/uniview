// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
)

// Ref: #/components/schemas/Directory
type Directory struct {
	// The id of the root.
	Root int `json:"root"`
	// The path relative to the root to reach this directory.
	RelativePath string `json:"relative_path"`
	// The files contained in this directory.
	Content []File `json:"content"`
}

// GetRoot returns the value of Root.
func (s *Directory) GetRoot() int {
	return s.Root
}

// GetRelativePath returns the value of RelativePath.
func (s *Directory) GetRelativePath() string {
	return s.RelativePath
}

// GetContent returns the value of Content.
func (s *Directory) GetContent() []File {
	return s.Content
}

// SetRoot sets the value of Root.
func (s *Directory) SetRoot(val int) {
	s.Root = val
}

// SetRelativePath sets the value of RelativePath.
func (s *Directory) SetRelativePath(val string) {
	s.RelativePath = val
}

// SetContent sets the value of Content.
func (s *Directory) SetContent(val []File) {
	s.Content = val
}

func (*Directory) getFilesRootRelpathRes() {}

// Ref: #/components/schemas/File
type File struct {
	// The filename.
	Name string `json:"name"`
	// True if the file is a directory.
	Directory bool `json:"directory"`
}

// GetName returns the value of Name.
func (s *File) GetName() string {
	return s.Name
}

// GetDirectory returns the value of Directory.
func (s *File) GetDirectory() bool {
	return s.Directory
}

// SetName sets the value of Name.
func (s *File) SetName(val string) {
	s.Name = val
}

// SetDirectory sets the value of Directory.
func (s *File) SetDirectory(val bool) {
	s.Directory = val
}

// GetFilesRootRelpathNotFound is response for GetFilesRootRelpath operation.
type GetFilesRootRelpathNotFound struct{}

func (*GetFilesRootRelpathNotFound) getFilesRootRelpathRes() {}

type GetStatusOK Status

func (*GetStatusOK) getStatusRes() {}

type GetStatusServiceUnavailable Status

func (*GetStatusServiceUnavailable) getStatusRes() {}

// NewOptPlaybackPosition returns new OptPlaybackPosition with value set to v.
func NewOptPlaybackPosition(v PlaybackPosition) OptPlaybackPosition {
	return OptPlaybackPosition{
		Value: v,
		Set:   true,
	}
}

// OptPlaybackPosition is optional PlaybackPosition.
type OptPlaybackPosition struct {
	Value PlaybackPosition
	Set   bool
}

// IsSet returns true if OptPlaybackPosition was set.
func (o OptPlaybackPosition) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlaybackPosition) Reset() {
	var v PlaybackPosition
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlaybackPosition) SetTo(v PlaybackPosition) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlaybackPosition) Get() (v PlaybackPosition, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlaybackPosition) Or(d PlaybackPosition) PlaybackPosition {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPlayerStartPostReq returns new OptPlayerStartPostReq with value set to v.
func NewOptPlayerStartPostReq(v PlayerStartPostReq) OptPlayerStartPostReq {
	return OptPlayerStartPostReq{
		Value: v,
		Set:   true,
	}
}

// OptPlayerStartPostReq is optional PlayerStartPostReq.
type OptPlayerStartPostReq struct {
	Value PlayerStartPostReq
	Set   bool
}

// IsSet returns true if OptPlayerStartPostReq was set.
func (o OptPlayerStartPostReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPlayerStartPostReq) Reset() {
	var v PlayerStartPostReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPlayerStartPostReq) SetTo(v PlayerStartPostReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPlayerStartPostReq) Get() (v PlayerStartPostReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPlayerStartPostReq) Or(d PlayerStartPostReq) PlayerStartPostReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Holds information on the players pause state.
// Ref: #/components/schemas/Pause
type Pause struct {
	// The paused state.
	Paused bool `json:"paused"`
	// The timestamp the video was paused at.
	PausedMinusAt OptPlaybackPosition `json:"paused-at"`
}

// GetPaused returns the value of Paused.
func (s *Pause) GetPaused() bool {
	return s.Paused
}

// GetPausedMinusAt returns the value of PausedMinusAt.
func (s *Pause) GetPausedMinusAt() OptPlaybackPosition {
	return s.PausedMinusAt
}

// SetPaused sets the value of Paused.
func (s *Pause) SetPaused(val bool) {
	s.Paused = val
}

// SetPausedMinusAt sets the value of PausedMinusAt.
func (s *Pause) SetPausedMinusAt(val OptPlaybackPosition) {
	s.PausedMinusAt = val
}

type PlaybackPosition float32

// PlayerStartPostAccepted is response for PlayerStartPost operation.
type PlayerStartPostAccepted struct{}

func (*PlayerStartPostAccepted) playerStartPostRes() {}

// PlayerStartPostBadRequest is response for PlayerStartPost operation.
type PlayerStartPostBadRequest struct{}

func (*PlayerStartPostBadRequest) playerStartPostRes() {}

// PlayerStartPostNotFound is response for PlayerStartPost operation.
type PlayerStartPostNotFound struct{}

func (*PlayerStartPostNotFound) playerStartPostRes() {}

// PlayerStartPostReq represents sum type.
type PlayerStartPostReq struct {
	Type        PlayerStartPostReqType // switch on this field
	VideoFile   VideoFile
	VideoStream VideoStream
}

// PlayerStartPostReqType is oneOf type of PlayerStartPostReq.
type PlayerStartPostReqType string

// Possible values for PlayerStartPostReqType.
const (
	VideoFilePlayerStartPostReq   PlayerStartPostReqType = "VideoFile"
	VideoStreamPlayerStartPostReq PlayerStartPostReqType = "VideoStream"
)

// IsVideoFile reports whether PlayerStartPostReq is VideoFile.
func (s PlayerStartPostReq) IsVideoFile() bool { return s.Type == VideoFilePlayerStartPostReq }

// IsVideoStream reports whether PlayerStartPostReq is VideoStream.
func (s PlayerStartPostReq) IsVideoStream() bool { return s.Type == VideoStreamPlayerStartPostReq }

// SetVideoFile sets PlayerStartPostReq to VideoFile.
func (s *PlayerStartPostReq) SetVideoFile(v VideoFile) {
	s.Type = VideoFilePlayerStartPostReq
	s.VideoFile = v
}

// GetVideoFile returns VideoFile and true boolean if PlayerStartPostReq is VideoFile.
func (s PlayerStartPostReq) GetVideoFile() (v VideoFile, ok bool) {
	if !s.IsVideoFile() {
		return v, false
	}
	return s.VideoFile, true
}

// NewVideoFilePlayerStartPostReq returns new PlayerStartPostReq from VideoFile.
func NewVideoFilePlayerStartPostReq(v VideoFile) PlayerStartPostReq {
	var s PlayerStartPostReq
	s.SetVideoFile(v)
	return s
}

// SetVideoStream sets PlayerStartPostReq to VideoStream.
func (s *PlayerStartPostReq) SetVideoStream(v VideoStream) {
	s.Type = VideoStreamPlayerStartPostReq
	s.VideoStream = v
}

// GetVideoStream returns VideoStream and true boolean if PlayerStartPostReq is VideoStream.
func (s PlayerStartPostReq) GetVideoStream() (v VideoStream, ok bool) {
	if !s.IsVideoStream() {
		return v, false
	}
	return s.VideoStream, true
}

// NewVideoStreamPlayerStartPostReq returns new PlayerStartPostReq from VideoStream.
func NewVideoStreamPlayerStartPostReq(v VideoStream) PlayerStartPostReq {
	var s PlayerStartPostReq
	s.SetVideoStream(v)
	return s
}

// PutPlayerPauseAccepted is response for PutPlayerPause operation.
type PutPlayerPauseAccepted struct{}

// PutPlayerPositionAccepted is response for PutPlayerPosition operation.
type PutPlayerPositionAccepted struct{}

// Holds information on the currently running client.
// Ref: #/components/schemas/Status
type Status struct {
	// The currect connection status.
	Connection StatusConnection `json:"connection"`
	// The used player interface.
	Player string `json:"player"`
	// The program version.
	Version Version `json:"version"`
}

// GetConnection returns the value of Connection.
func (s *Status) GetConnection() StatusConnection {
	return s.Connection
}

// GetPlayer returns the value of Player.
func (s *Status) GetPlayer() string {
	return s.Player
}

// GetVersion returns the value of Version.
func (s *Status) GetVersion() Version {
	return s.Version
}

// SetConnection sets the value of Connection.
func (s *Status) SetConnection(val StatusConnection) {
	s.Connection = val
}

// SetPlayer sets the value of Player.
func (s *Status) SetPlayer(val string) {
	s.Player = val
}

// SetVersion sets the value of Version.
func (s *Status) SetVersion(val Version) {
	s.Version = val
}

// The currect connection status.
type StatusConnection string

const (
	StatusConnectionOk           StatusConnection = "ok"
	StatusConnectionConnecting   StatusConnection = "connecting"
	StatusConnectionDisconnected StatusConnection = "disconnected"
)

// AllValues returns all StatusConnection values.
func (StatusConnection) AllValues() []StatusConnection {
	return []StatusConnection{
		StatusConnectionOk,
		StatusConnectionConnecting,
		StatusConnectionDisconnected,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StatusConnection) MarshalText() ([]byte, error) {
	switch s {
	case StatusConnectionOk:
		return []byte(s), nil
	case StatusConnectionConnecting:
		return []byte(s), nil
	case StatusConnectionDisconnected:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StatusConnection) UnmarshalText(data []byte) error {
	switch StatusConnection(data) {
	case StatusConnectionOk:
		*s = StatusConnectionOk
		return nil
	case StatusConnectionConnecting:
		*s = StatusConnectionConnecting
		return nil
	case StatusConnectionDisconnected:
		*s = StatusConnectionDisconnected
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A semver compatible version.
// Ref: #/components/schemas/Version
type Version struct {
	// The major version number.
	Major int `json:"major"`
	// The minor version number.
	Minor int `json:"minor"`
	// The patchlevel.
	Patch int `json:"patch"`
	// A potential suffix, if provided.
	Suffix OptString `json:"suffix"`
}

// GetMajor returns the value of Major.
func (s *Version) GetMajor() int {
	return s.Major
}

// GetMinor returns the value of Minor.
func (s *Version) GetMinor() int {
	return s.Minor
}

// GetPatch returns the value of Patch.
func (s *Version) GetPatch() int {
	return s.Patch
}

// GetSuffix returns the value of Suffix.
func (s *Version) GetSuffix() OptString {
	return s.Suffix
}

// SetMajor sets the value of Major.
func (s *Version) SetMajor(val int) {
	s.Major = val
}

// SetMinor sets the value of Minor.
func (s *Version) SetMinor(val int) {
	s.Minor = val
}

// SetPatch sets the value of Patch.
func (s *Version) SetPatch(val int) {
	s.Patch = val
}

// SetSuffix sets the value of Suffix.
func (s *Version) SetSuffix(val OptString) {
	s.Suffix = val
}

// Ref: #/components/schemas/VideoFile
type VideoFile struct {
	// The root the file is under.
	Root int `json:"root"`
	// The relative path to the file.
	RelativePath string `json:"relativePath"`
}

// GetRoot returns the value of Root.
func (s *VideoFile) GetRoot() int {
	return s.Root
}

// GetRelativePath returns the value of RelativePath.
func (s *VideoFile) GetRelativePath() string {
	return s.RelativePath
}

// SetRoot sets the value of Root.
func (s *VideoFile) SetRoot(val int) {
	s.Root = val
}

// SetRelativePath sets the value of RelativePath.
func (s *VideoFile) SetRelativePath(val string) {
	s.RelativePath = val
}

type VideoStream string
